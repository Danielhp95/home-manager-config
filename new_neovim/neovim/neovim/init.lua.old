function strEmpty(s)
  return s == nil or s == ""
end
function getCurrDir()
  file = vim.fn.expand("%")
  if strEmpty(file) then
    return vim.fn.getcwd()
  else
    return vim.fn.system("dirname "..file):gsub("%s+", "")
  end
end

require('leap').add_default_mappings()

function ResetSsh()
  local url = vim.fn.system("get-default-ssh")
  vim.fn.setenv("SSH_AUTH_SOCK", url)
end

function SetLatestSsh()
  local url = vim.fn.system("get-recent-ssh")
  vim.fn.setenv("SSH_AUTH_SOCK", url)
end

-- IMPORTANT: make sure to setup neodev BEFORE lspconfig
require("neodev").setup({
  -- add any options here, or leave empty to use the default settings
  library = {
    enabled = true,
    runtime = true,
    types = true,
    plugins = true,
  },
  setup_jsonls = true,
  lspconfig = true,
})

vim.api.nvim_set_keymap('v', '<leader>rr', '<Plug>(Luadev-Run)', { noremap = false, silent = false })
vim.api.nvim_set_keymap('n', '<leader>rr', '<Plug>(Luadev-RunLine)', { noremap = false, silent = false })
-- worse than neodev
--vim.api.nvim_set_keymap('i', '<leader>rr', '<Plug>(Luadev-Complete)', { noremap = false, silent = false })

function FmDir(cmd)
  parent = getCurrDir()
  vim.cmd (string.format(":%s %s", cmd, parent))
end

-- Mappings.
-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap = true, silent = true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
--local on_attach = function(client, bufnr)
--  -- Enable completion triggered by <c-x><c-o>
--  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
--
--  -- Mappings.
--  -- See `:help vim.lsp.*` for documentation on any of the below functions
--  local bufopts = { noremap=true, silent=true, buffer=bufnr }
--  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
--  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
--  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
--  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
--  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
--  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
--  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
--  vim.keymap.set('n', '<space>wl', function()
--    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--  end, bufopts)
--  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
--  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
--  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
--  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
--  vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
--end

require'nu'.setup{
    use_lsp_features = true, -- requires https://github.com/jose-elias-alvarez/null-ls.nvim
    -- lsp_feature: all_cmd_names is the source for the cmd name completion.
    -- It can be
    --  * a string, which is interpreted as a shell command and the returned list is the source for completions (requires plenary.nvim)
    --  * a list, which is the direct source for completions (e.G. all_cmd_names = {"echo", "to csv", ...})
    --  * a function, returning a list of strings and the return value is used as the source for completions
    all_cmd_names = [[nu -c 'help commands | get name | str join "\n"']]
}

local which_key = require('which-key')
local on_attach = function(client, bufnr)
  -- Enable completion triggered by <c-x><c-o>
  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  -- See `:help vim.lsp.*` for documentation on any of the below functions
  local bufopts = { noremap = true, silent = true, buffer = bufnr }
  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
  bufopts.prefix = "<leader>"
  which_key.register({
    j = {
      name = "+lsp_bindings",
      h = { vim.lsp.buf.document_highlights, "Document Highlights" },
      H = { vim.lsp.buf.document_symbols, "Document Symbols" },
      d = { vim.lsp.buf.definition, "Jump to Definition" },
      D = { vim.lsp.buf.declaration, "Jump to Declaration" },
      c = { vim.lsp.buf.code_action, "Perform code action" },
      e = { vim.diagnostic.open_float, "Get lsp errors" },
      f = { function() vim.lsp.buf.format { async = true } end, "Format buffer" },
      i = { vim.lsp.buf.implementation, "Jump to Implementation" },
      k = { vim.lsp.buf.type_definition, "Get type definition" },
      r = { vim.lsp.buf.references, "Get function/variable refs" },
      R = { vim.lsp.buf.rename, "Rename function/variable" },
      s = { vim.lsp.buf.signature_help, "Get function signature" },
      w = {
        name = "+workspace options",
        a = { vim.lsp.buf.add_workspace_folder, "add workspace folder" },
        r = { vim.lsp.buf.remove_workspace_folder, "remove workspace folder" },
        l = {
          function()
            print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
          end,
          "list workspaces folders"
        },
      },
    },
  }, bufopts)
end

require('telescope').setup {
  extensions = {
    project = {
      base_dirs = {
        '~/',
        '~/repos',
      },
      -- theme = "dropdown"
    }
  }
}
require'telescope'.load_extension('project')

function GitCurrentBranchName()
  local branch = vim.fn.system("git branch --show-current 2> /dev/null | tr -d 'n'")
  if branch ~= "" then
    return branch
  else
    return ""
  end
end

require('lspkind').init {
    symbol_map = {
        Text = '',
        Method = 'ƒ',
        Function = '',
        Constructor = '',
        Variable = '',
        Class = '',
        Interface = '󰦿',
        Module = '󰏗',
        Property = '',
        Unit = '',
        Value = '󰎠',
        Enum = '了',
        Keyword = '󰌆',
        Snippet = '󰘍',
        Color = '',
        File = '',
        Folder = '',
        EnumMember = '',
        Constant = '',
        Struct = '',
        Field = '󰏗',
    },
}

require('nvim-treesitter.configs').setup {
  playground = { enable = true },
  query_linter = {
    enable = true,
    use_virtual_text = true,
    lint_events = { "BufWrite", "CursorHold" },
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
  highlight = { enable = true },
  rainbow = { enable = true, },
  matchup = { enable = true, },
  autotag = { enable = true, },
}

--require'compe'.setup {
--  enabled = true;
--  autocomplete = true;
--  debug = false;
--  min_length = 1;
--  preselect = 'enable';
--  throttle_time = 80;
--  source_timeout = 200;
--  resolve_timeout = 800;
--  incomplete_delay = 400;
--  max_abbr_width = 100;
--  max_kind_width = 100;
--  max_menu_width = 100;
--  documentation = {
--    border = { "", "" ,"", " ", "", "", "", " " }, -- the border option is the same as `|help nvim_open_win|`
--    winhighlight = "NormalFloat:CompeDocumentation,FloatBorder:CompeDocumentationBorder",
--    max_width = 120,
--    min_width = 60,
--    max_height = math.floor(vim.o.lines * 0.3),
--    min_height = 1,
--  };
--
--  source = {
--    path = true;
--    buffer = true;
--    calc = true;
--    nvim_lsp = true;
--    nvim_lua = true;
--    vsnip = true;
--    ultisnips = true;
--    luasnip = true;
--  };
--}

local cmp = require'cmp'
cmp.setup({
    snippet = {
        expand = function(args)
            vim.fn["vsnip#anonymous"](args.body)
        end,
    },
    mapping = {
        ['<C-j>'] = cmp.mapping.select_next_item(),
        ['<C-k>'] = cmp.mapping.select_prev_item(),
        ['<C-Space>'] = cmp.mapping.complete(),
        --['<C-e>'] = cmp.mapping.close(),
        ['<C-u>'] = cmp.mapping.scroll_docs(-4),
        ['<C-d>'] = cmp.mapping.scroll_docs(4),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<C-s>'] = cmp.mapping.confirm({ select = true }),
        ['<CR>'] = cmp.mapping.confirm({ select = false }),
    },
    sources = {
        { name = 'path' },
        { name = 'nvim_lsp' },
        { name = 'nixpkgs' },
        { name = 'nixos' },
        { name = 'vsnip' },
        --{ name = 'orgmode' },
        { name = 'buffer',  options = {
            get_bufnrs = function()
                return vim.api.nvim_list_bufs()
            end
        }},
    },
    formatting = {
        format = function(entry, vim_item)
            --vim_item.kind = require("lspkind").presets.default[vim_item.kind] .. " " .. vim_item.kind
            -- workaround for nix/nixpkgs
            if not (vim_item.kind == "Attr") then
              vim_item.kind = require("lspkind").presets.default[vim_item.kind] .. " " .. vim_item.kind
            end
            vim_item.menu = ({
                path = "[Path]",
                buffer = "[Buffer]",
                nvim_lsp = "[LSP]",
                luasnip = "[LuaSnip]",
                vsnip = "[VSnip]",
                nvim_lua = "[Lua]",
                latex_symbols = "[Latex]",
                --orgmode = "[Org]",
            })[entry.source.name]
            return vim_item
        end,
    },
})

cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline({
    ["<C-j>"] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 'c' }),
    ["<C-k>"] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 'c' }),
  }),
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

require('Comment').setup()

local actions = require('telescope.actions')
local pickers = require'telescope.pickers'
local sorters = require'telescope.sorters'
local finders = require'telescope.finders'
local previewers = require'telescope.previewers'
local from_entry = require'telescope.from_entry'
local actions_set = require'telescope.actions.set'
local utils = require'telescope.utils'
local putils = require('telescope.previewers.utils')
local action_set = require('telescope.actions.set')

local function action_edit_ctrl_l(prompt_bufnr)
    return action_set.select(prompt_bufnr, "ctrl-l")
end

local function action_edit_ctrl_r(prompt_bufnr)
    return action_set.select(prompt_bufnr, "ctrl-r")
end

require('telescope').setup {
  defaults = {
      layout_config = {
          prompt_position = "bottom",
          vertical = { width = 0.97, height = 0.99 }
      },
      sorting_strategy = "descending",
      layout_strategy = 'vertical',
      mappings = {
          i = {
            ["<C-j>"] = actions.move_selection_next,
            ["<C-k>"] = actions.move_selection_previous,
            ["<CR>"] = actions.select_default + actions.center,
            ["<C-s>"] = actions.select_horizontal,
            ["<esc>"] = actions.close,
            ["<C-l>"] = action_edit_ctrl_l,
            ["<C-r>"] = action_edit_ctrl_r,
            ["<C-n>"] = actions.cycle_history_next,
            ["<C-p>"] = actions.cycle_history_prev,
            ["<C-o>"] = actions.results_scrolling_up,
            ["<C-e>"] = actions.results_scrolling_down,
            ["<C-z>"] = actions.complete_tag,
          },
          n = {
              ["<esc>"] = actions.close,
          },
      },
  },
  pickers = {
      buffers = {
          ignore_current_buffer = true,
          sort_mru = true,
      },
      find_files = {
          additional_args = function(opts)
              return {"hidden=true"}
          end
      },
      live_grep = {
          additional_args = function(opts)
              return {"--hidden"}
          end
      },
  },
  extensions = {
    undo = {
      side_by_side = false,
    },
    file_browser = {
      theme = "ivy",
      -- disables netrw and use telescope-file-browser in its place
      hijack_netrw = true,
      mappings = {
        ["i"] = {
          -- your custom insert mode mappings
        },
        ["n"] = {
          -- your custom normal mode mappings
        },
      },
    },
    fzf = {
        fuzzy = true,                    -- false will only do exact matching
        override_generic_sorter = false, -- override the generic sorter
        override_file_sorter = true,     -- override the file sorter
        case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
    },
  }
}

require("telescope").load_extension "manix"
require("telescope").load_extension "undo"
require("telescope").load_extension "cheat"
require('telescope').load_extension "env"
require("telescope").load_extension "file_browser"
require('telescope').load_extension "fzf"

--require('telescope').load_extension('gh')
--require('telescope').load_extension('dap')
--require('telescope').load_extension('project')
--
require("telescope-tabs").setup {}

vim.api.nvim_set_keymap(
  "n",
  "<leader>tb",
  ":Telescope file_browser<CR>",
  { noremap = true }
)

-- Custom pickers
local cdPicker = function(name, cmd)
    pickers.new({}, {
        prompt_title = name,
        finder = finders.new_table{ results = utils.get_os_command_output(cmd) },
        previewer = previewers.vim_buffer_cat.new({}),
        sorter = sorters.get_fuzzy_file(),
        attach_mappings = function(prompt_bufnr)
            actions_set.select:replace(function(_, type)
                local entry = actions.get_selected_entry()
                actions.close(prompt_bufnr)
                local dir = from_entry.path(entry)
                vim.cmd('cd '..dir)
            end)
            return true
        end,
    }):find()
end

function Cd(path)
    path = path or '.'
    cdPicker('Cd', {vim.o.shell, '-c', "fd . "..path.." --type=d 2>/dev/null"})
end

function Cdz()
    cdPicker('z directories', {vim.o.shell, '-c', "cat ~/.z | cut -d '|' -f1"})
end

function File_picker()
    vim.fn.system('git rev-parse --git-dir > /dev/null 2>&1')
    local is_git = vim.v.shell_error == 0
    if is_git then
        require'telescope.builtin'.find_files()
    else
        vim.cmd 'Files'
    end
end

require'telescope-all-recent'.setup{
  database = {
    folder = vim.fn.stdpath("data"),
    file = "telescope-all-recent.sqlite3",
    max_timestamps = 10,
  },
  scoring = {
    recency_modifier = { -- also see telescope-frecency for these settings
      [1] = { age = 240, value = 100 }, -- past 4 hours
      [2] = { age = 1440, value = 80 }, -- past day
      [3] = { age = 4320, value = 60 }, -- past 3 days
      [4] = { age = 10080, value = 40 }, -- past week
      [5] = { age = 43200, value = 20 }, -- past month
      [6] = { age = 129600, value = 10 } -- past 90 days
    },
    -- how much the score of a recent item will be improved.
    boost_factor = 0.0001
  },
  default = {
    disable = true, -- disable any unkown pickers (recommended)
    use_cwd = true, -- differentiate scoring for each picker based on cwd
    sorting = 'recent' -- sorting: options: 'recent' and 'frecency'
  },
}

vim.cmd 'set termguicolors'
vim.cmd 'colorscheme base16-ffffff'

-- add transparency
-- vim.cmd 'hi Normal ctermbg=NONE guibg=NONE'
-- vim.cmd 'hi NonText ctermbg=NONE guibg=NONE'
-- vim.cmd 'hi SignColumn ctermbg=NONE guibg=NONE'

require'tabline'.setup {
  -- Defaults configuration options
  enable = true,
  options = {
  -- If lualine is installed tabline will use separators configured in lualine by default.
  -- These options can be used to override those settings.
    section_separators = {'', ''},
    component_separators = {'', ''},
    max_bufferline_percent = 66, -- set to nil by default, and it uses vim.o.columns * 2/3
    show_tabs_always = true, -- this shows tabs only when there are more than one tab or if the first tab is named
    show_devicons = true, -- this shows devicons in buffer section
    show_bufnr = false, -- this appends [bufnr] to buffer section,
    show_filename_only = false, -- shows base filename only instead of relative path in filename
    modified_icon = "+ ", -- change the default modified icon
    modified_italic = true, -- set to true by default; this determines whether the filename turns italic if modified
    show_tabs_only = true, -- this shows only tabs instead of tabs + buffers
  }
}

require'lualine'.setup {
  options = {
    theme = "palenight",
    component_separators = {
      left = "",
      right = "",
    },
    section_separators = {
      left = "",
      right = "",
    },
    globalstatus = true,
  };
  tabline = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = { require'tabline'.tabline_buffers },
    lualine_x = { require'tabline'.tabline_tabs },
    lualine_y = {},
    lualine_z = {},
  },
  sections = {
    lualine_a = { "mode" },
    lualine_b = { "branch", "diff", "diagnostics" },
    lualine_c = { "filename" },
    lualine_x = { "encoding", "fileformat" },
    lualine_y = { "progress" },
    lualine_z = { "location" },
  },
}

vim.cmd[[
  set guioptions-=e " Use showtabline in gui vim
  set sessionoptions+=tabpages,globals " store tabpages and globals in session
]]



local _cmp_nvim_lsp_present, _cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
local capabilities = nil
if present then
    capabilities = require("cmp_nvim_lsp").update_capabilities(vim.lsp.protocol.make_client_capabilities())
end

vim.g.blamer_enabled = 1
vim.g.completeopt = "menu,menuone,noselect"
vim.g.mapleader = " "
vim.g.nofoldenable = true
vim.g.noshowmode = true
vim.g.noswapfile = true
vim.g.oscyank_max_length = 100000000
vim.o.autoindent = true
vim.o.autoread = true
vim.o.background = "dark"
vim.o.backspace = "indent,eol,start"
vim.o.binary = true
vim.o.bomb = true
vim.o.clipboard = "unnamed,unnamedplus"
vim.o.copyindent = true
vim.o.cursorline = true
vim.o.encoding = "utf-8"
vim.o.expandtab = true
vim.o.fileencoding = "utf-8"
vim.o.fileencodings = "utf-8"
vim.o.foldlevel = 1
vim.o.foldmethod = "indent"
vim.o.foldnestmax = 10
vim.o.formatoptions = "tcqj"
vim.o.grepformat = "%f:%l:%c:%m,%f:%l:%m"
vim.o.grepprg = "rg --vimgrep --no-heading --smart-case"
vim.o.hidden = true
vim.o.ignorecase = true
vim.o.list = true
vim.o.listchars = "tab:→→,trail:●,nbsp:○"
vim.o.matchpairs = "(:),{:},[:],<:>"
vim.o.number = true
vim.o.relativenumber = true
vim.o.scrolloff = 3
vim.o.showcmd = true
vim.o.showmatch = true
vim.o.sidescrolloff = 5
vim.o.smartcase = true
vim.o.splitbelow = false
vim.o.splitright = true
vim.o.title = true
vim.o.undofile = true
vim.o.undolevels = 1000000
vim.o.undoreload = 1000000
vim.o.wildmode = "list:longest,list:full"
vim.o.wrap = true
vim.opt.autoread = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 2
vim.opt.smartindent = true
vim.opt.softtabstop = 2
vim.opt.tabstop = 2

local fm_nvim = require('fm-nvim')
fm_nvim.setup({broot_conf = "~/.config/broot/conf.hjson", cmds = {broot = "/nix/store/k3yvrzrxb02byp187vlbql3y26y61vr1-broot-1.22.1/bin/broot --out /tmp/fm-nvim", ranger = "/nix/store/rckxq47hbyxqmjn61mjqvcihq3wfgb8a-ranger-latest-fe7c3b/bin/ranger", xplr = "/nix/store/vwkqn228y3qd3pylcdg39j4g0fg9zb6h-xplr-0.21.2/bin/xplr"}, edit_cmd = "edit", mappings = {ESC = ":q<CR>", edit = "<C-e>", horz_split = "<C-h>", tabedit = "<C-t>", vert_split = "<C-v>"}, ui = {default = "float", float = {blend = 0, border = "rounded", border_hl = "FloatBorder", float_hl = "Normal", height = 0.9, width = 0.9, x = 0.5, y = 0.5}}})

 local guess_indent = require('guess-indent')
guess_indent.setup({})

 local lsp_signature = require('lsp_signature')
lsp_signature.setup({bind = true, handler_opts = {border = "single"}, hi_parameter = "Visual", hint_enable = false})

 local lspconfig = require('lspconfig')
lspconfig.bashls.setup({cmd = {"/nix/store/xnz1x14z1lipssj0g1krs6m3dv401jjw-bash-language-server-4.9.2/bin/bash-language-server"}, on_attach = on_attach})

 local lspconfig = require('lspconfig')
lspconfig.gopls.setup({cmd = {"/nix/store/fmy1xw5v1d8ay7a0kxqig0d3l4k8imj8-gopls-0.12.2/bin/gopls"}})

 local lspconfig = require('lspconfig')
lspconfig.lua_ls.setup({cmd = {"/nix/store/z22lij0i3hpf3xqvd1shf5d1jh6p4qd4-lua-language-server-3.6.21/bin/lua-language-server"}, on_attach = on_attach, settings = {Lua = {diagnostics = {globals = {"vim"}}, telemetry = {enable = false}, workspace = {checkThirdParty = false, library = {
          vim.fn.expand "$VIMRUNTIME",
          --get_lvim_base_dir(),
          require("neodev.config").types(),
          "${3rd}/busted/library",
          "${3rd}/luassert/library",
        }, maxPreload = 5000, preloadFileSize = 10000}}}})

 local lspconfig = require('lspconfig')
lspconfig.nil_ls.setup({capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities()), cmd = {"/nix/store/h8bd3zkimcvh9jn5szw4gcfsjahzj5pq-nil-2023-05-09/bin/nil"}, on_attach = on_attach})

 local lspconfig = require('lspconfig')
lspconfig.pyright.setup({cmd = {"/nix/store/8af1isqz64fim2frhlxs5g3mcwxm5d67-pyright-1.1.311/bin/pyright"}, on_attach = on_attach})

 local lspconfig = require('lspconfig')
lspconfig.rust_analyzer.setup({capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities()), cmd = {"/nix/store/ynx7bpmgspr2q93kwxzx3jyzk1yd81m0-rust-analyzer-2023-05-29/bin/rust-analyzer"}, on_attach = on_attach})

 local neo_zoom = require('neo-zoom')
neo_zoom.setup({border = "single", left_ratio = 0.03, width_ratio = 0.9})

 local nvim_autopairs = require('nvim-autopairs')
nvim_autopairs.setup({})

 local nvim_tree = require('nvim-tree')
nvim_tree.setup({diagnostics = {enable = false, icons = {error = "", hint = "", info = "", warning = ""}}, disable_netrw = true, filters = {custom = {}, dotfiles = false}, git = {enable = true, ignore = true, timeout = 500}, hijack_cursor = false, hijack_netrw = true, open_on_tab = false, system_open = {args = {}, cmd = null}, update_cwd = false, update_focused_file = {enable = false, ignore_list = {}, update_cwd = false}, view = {adaptive_size = true, hide_root_folder = false, mappings = {custom_only = false, list = {}}, side = "left", width = 30}})

 local sessions = require('sessions')
sessions.setup({})

 local surround = require('surround')
surround.setup({})

 local tabline = require('tabline')
tabline.setup({show_index = false})

 local toggleterm = require('toggleterm')
toggleterm.setup({direction = "float", float_opts = {border = "double", winblend = 0}, persist_mode = true, persist_size = true, shade_terminals = true, shading_factor = 2, start_in_insert = true})

 local which_key = require('which-key')
which_key.register({H = { "<cmd>tabp<cr>", "Go to prev tab", noremap = true }, K = {{content = "vim.lsp.buf.hover", subtype = "rawLua", type = "nix2vim"}, "Hover docs"}, L = { "<cmd>tabn<cr>", "Go to next tab", noremap = true }, ['<leader>'] = {F = {C = {"<cmd>BCommits<cr>", "Open this branch's commits in FZF"}, ['/'] = {"<cmd>Files /<cr>", "Files in root"}, ['?'] = {"<cmd>Lines<cr>", "Search in open buffers"}, ['~'] = {"<cmd>Files ~<cr>", "Files in home"}, a = {"<cmd>Commits<cr>", "Open commit log in FZF"}, b = {"<cmd>Buffers<cr>", "Switch to open buffers"}, c = {"<cmd>GCheckout<cr>", "Search checked-out branches"}, f = {"<cmd>Files<cr>", "Files in dir"}, g = {"<cmd>Rg<cr>", "Search files in dir"}, h = {"<cmd>History<cr>", "Search command history"}, m = {"<cmd>Maps<cr>", "Search keymaps"}, name = "+find (fzf)"}, H = {"<cmd>wincmd H<cr>", "Move buffer left"}, J = {"<cmd>wincmd J<cr>", "Move buffer downwards"}, K = {"<cmd>wincmd K<cr>", "Move buffer upwards"}, L = {"<cmd>wincmd L<cr>", "Move buffer right"}, ['-'] = {"<cmd>lua FmDir('Ranger')<cr>", "Ranger open in current dir"}, ['_'] = {"<cmd>Ranger ~<cr>", "Ranger open in home dir"}, ['c.'] = {"<cmd>Cd .<CR>", "change directory to current dir"}, ['c<space>'] = {":Cd", "something"}, a = {B = {"<cmd>Broot ~<cr>", "Broot open in home dir"}, D = {"<cmd>Xplr ~<cr>", "Xplr open in home dir"}, b = {"<cmd>lua FmDir('Broot')<cr>", "Broot open in curr dir"}, d = {"<cmd>lua FmDir('Xplr')<cr>", "Xplr open in curr dir"}, k = {"<cmd>lua SetLatestSsh()<cr>", "Set SSH_AUTH_SOCK to newest created"}, name = "+misc commands", r = {"<cmd>lua ResetSsh()<cr>", "Reset SSH_AUTH_SOCK"}, t = {"<cmd>NvimTreeToggle<cr>", "Toggle NvimTree"}}, ai = {"<cmd>AnsiEsc<cr>", "Replace ansi escape codes with colors"}, cg = {"<cmd>Gcd<CR>", "change directory to parent .git dir"}, ch = {"<cmd>cd ~<CR>", "change directory to home dir"}, cl = {"<cmd>lcd %:h<CR>", "change directory to current file dir"}, f = {C = {"<cmd>Telescope git_bcommits<cr>", "Commits since last fork"}, E = {"<cmd>Telescope env<cr>", "lookup undo tree"}, F = {"<cmd>lua require'telescope.builtin'.live_grep {default_text='function'}<cr>", "grep for functions only"}, G = {"<cmd>Telescope grep_string<cr>", "Fuzzy search your cursor"}, J = {"<cmd>lua require'telescope.builtin'.live_grep{ search_dirs={\"%:p\"} }<cr>", "Fuzzy search in current directory"}, N = {"<cmd>lua require'telescope-manix'.search({ cword = false })<cr>", "manix search (general)"}, T = {"<cmd>Telescope telescope-tabs list_tabs<cr>", "Telescope list tabs"}, ['-'] = {"<cmd>Telescope file_browser<cr>", "Get buffer list"}, ['.'] = {"<cmd>lua require'telescope.builtin'.find_files({ search_dirs={getCurrDir()} })<cr>", "Search files in home directory"}, [':'] = {"<cmd>Telescope commands<cr>", "Telescope command picker"}, [';'] = {"<cmd>Telescope command_history<cr>", "Telescope command history"}, ['~'] = {"<cmd>lua require'telescope.builtin'.find_files({ search_dirs={'~'} })<cr>", "Search files in home directory"}, a = {"<cmd>Telescope git_commits<cr>", "All Commits"}, c = {"<cmd>Telescope git_branches<cr>", "Git Branches"}, d = {"<cmd>Telescope lsp_document_symbols<cr>", "lsp document symbols"}, e = {"<cmd>Telescope diagnostics<cr>", "Errors / Diagnostics"}, f = {"<cmd>Telescope find_files<cr>", "Search files"}, g = {"<cmd>Telescope live_grep<cr>", "Fuzzy search in working dir"}, h = {"<cmd>Telescope command_history<cr>", "Telescope command history"}, j = {"<cmd>Telescope current_buffer_fuzzy_find<cr>", "Fuzzy search in current buffer"}, m = {"<cmd>Telescope keymaps<cr>", "Telescope mapped key bindings"}, n = {"<cmd>lua require'telescope-manix'.search({ cword = true })<cr>", "manix search for selected word"}, name = "+telescope", p = {"<cmd>Telescope project<cr>", "telescope project"}, q = {"<cmd>Telescope quickfix<cr>", "Telescope quickfix list"}, r = {"<cmd>Telescope resume<cr>", "last telescope query"}, s = {"<cmd>Telescope git_status<cr>", "Git Status"}, t = {"<cmd>Telescope <cr>", "Telescope default"}, u = {"<cmd>Telescope undo<cr>", "lookup undo tree"}, z = {"<cmd>Telescope cheat fd<cr>", "lookup cheatsheets"}}, g = {B = {"<cmd>GBrowse<cr>", "Open file in GitHub"}, C = {"<cmd>Git commit -v -q --amend<cr>", "Commit + amend"}, O = {":Git branch ", "Open Branch command"}, Q = {"<cmd>Gclog<cr>", "Open all commits log into quickfix list"}, R = {":Git rebase ", "Open rebase command"}, Y = {"<Cmd>lua require'gitlinker'.get_buf_range_url('n')<CR> "}, a = {"<cmd>GitGutterStageHunk<cr>", "Gutter Stage Hunk"}, b = {"<cmd>Git blame<cr>", "Git Blame"}, c = {"<cmd>Git commit -v -q<cr>", "Commit"}, d = {d = {"<cmd>Gdiff<cr>", "Diff to staged"}, g = {":Gdiff ", "Git diff (select your branch)"}, h = {"<cmd>Gdiff HEAD<cr>", "Diff to last commit on current file"}, name = "+diffs", o = {"<cmd>Gdiff origin/HEAD<cr>", "Diff to origin HEAD"}}, g = {":Git ", "Open git command"}, j = {"<cmd>GitGutterNextHunk<cr>", "Go to next hunk"}, k = {"<cmd>GitGutterPrevHunk<cr>", "Go to prev hunk"}, m = {":Git merge ", "Git merge"}, name = "+fugitive", o = {":Git checkout ", "Open Checkout command"}, p = {O = {":Git push origin ", "Push origin (complete)"}, P = {"<cmd>Git push<cr>", "Push"}, U = {":Git push upstream ", "Push upstream (complete)"}, f = {"<CMD>lua vim.cmd('Git push -u origin '..GitCurrentBranchName())<CR>", "Push origin for first time, same name"}, name = "+Remote options (push/pull)", o = {":Git pull origin ", "Pull origin (complete)"}, p = {"<cmd>Git pull<cr>", "Pull"}, u = {":Git pull upstream ", "Pull upstream (complete)"}}, q = {"<cmd>0Gclog<cr>", "Open current file commit log quickfix list"}, r = {":Git rebase --interactive<Space>", "Interactive rebase"}, s = {"<cmd>Git<cr>", "Git Status"}, u = {"<cmd>GitGutterUndoHunk<cr>", "Gutter Undo Hunk"}, w = {"<cmd>Gwrite<cr>", "Write + stage current file"}, y = {"<cmd>lua require'gitlinker'.get_buf_range_url('n', {action_callback = require'gitlinker.actions'.open_in_browser})<cr>"}}, gi = {"<cmd>GuessIndent<CR>", "guess indent again"}, h = {"<cmd>wincmd h<cr>", "Move cursor to buffer left"}, j = {"<cmd>wincmd j<cr>", "Move cursor to buffer below"}, k = {"<cmd>wincmd k<cr>", "Move cursor to buffer above"}, l = {"<cmd>wincmd l<cr>", "Move cursor to buffer right"}, n = {gD = {}}, name = "+leader_bindings", ok = {"<cmd>WhichKey<cr>", "Start WhichKey"}, r = {C = {"<cmd>!<cr>", "run a command"}, c = {"<cmd>r!<cr>", "run a command, pipe output into buffer"}, name = "+run"}, s = {s = {"<cmd>NeoZoomToggle<cr>", "Toggle NeoZoom"}}, u = {"<cmd>UndotreeToggle<cr>", "Toggle UndoTree"}, w = {D = {"<cmd>Bclose!<cr>", "Delete buffer aggressively"}, d = {"<cmd>bd<cr>", "Delete buffer"}, j = {"<cmd>bprev<cr>", "Previous buffer"}, k = {"<cmd>bnext<cr>", "Next buffer"}, name = "+window operations", q = {"<cmd>q<cr>", "Close buffer"}, t = {"<cmd>tabedit<cr>", "New buffer/tab"}, v = {"<cmd>vs<cr>", "Split window vertically"}, w = {"<cmd>Telescope buffers<cr>", "Get buffer list"}, x = {"<cmd>sp<cr>", "Split window horizontally"}}}, ['['] = {d = {"<cmd>lua vim.diagnostic.goto_prev()<cr>", "prev diag"}, name = "+Jump prev", q = {"<cmd>cprev<cr>", "prev quickfix"}}, [']'] = {d = {"<cmd>lua vim.diagnostic.goto_next()<cr>", "next diag"}, name = "+Jump next", q = {"<cmd>cnext<cr>", "next quickfix"}}, j = {"gj", "Wrapped down"}, k = {"gk", "Wrapped up"}})

 local which_key = require('which-key')
which_key.setup({})


local map = vim.api.nvim_set_keymap
map('n', '<Leader>Y', 'v$:OSCYankVisual<CR>', {noremap = true})
map('n', '<Leader>yy', 'V:OSCYankVisual<CR>', {noremap = true})
map('t', '<C-S>', '<C-\\><C-n> :ToggleTerm<cr>', {noremap = true})
map('t', '<C-\\><C-n>', '<Esc>', {noremap = true})
map('t', '<Esc>', '<C-\\><C-n>', {noremap = true})
map('v', '<Leader>y', ':OSCYankVisual<CR>', {noremap = true})

map('c', 'w!!', ':SudaWrite<CR>', {})
map('i', '<c-f>', '<plug>(fzf-complete-path)', {})
map('n', '<leader><tab>', '<plug>(fzf-maps-n)', {})
map('n', '<leader>rr', '<Plug>(Luadev-RunLine)', {})
map('o', '<leader><tab>', '<plug>(fzf-maps-o)', {})
map('v', '<leader>rr', '<Plug>(Luadev-Run)', {})
map('x', '<leader><tab>', '<plug>(fzf-maps-x)', {})


local gitlinker = require('gitlinker')
gitlinker.setup({
  callbacks = {
    ["gitea.home.lan"] = require "gitlinker.hosts".get_gitea_type_url,
    ["gitea.media.cave"] = require "gitlinker.hosts".get_gitea_type_url,
  },
  opts = {
    action_callback = function(url)
      -- yank to unnamed register
      vim.api.nvim_command('let @" = \'' .. url .. '\'')
      -- copy to the system clipboard using OSC52
      vim.fn.OSCYank(url)
    end,
  },
})

map('n', '<leader>gyy', '<cmd>lua require"gitlinker".get_buf_range_url()<cr>', {silent = true, noremap = true})
map('v', '<leader>gyy', '<cmd>lua require"gitlinker".get_buf_range_url()<cr>', {silent = true, noremap = true})
map('n', '<leader>gyb', '<cmd>lua require"gitlinker".get_buf_range_url("n", {action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true, noremap = true})
map('v', '<leader>gyb', '<cmd>lua require"gitlinker".get_buf_range_url("v", {action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true})
map('n', '<leader>gyB', '<cmd>lua require"gitlinker".get_repo_url({action_callback = require"gitlinker.actions".open_in_browser})<cr>', {silent = true})
map('n', '<leader>gyr', '<cmd>lua require"gitlinker".get_repo_url()<cr>', {silent = true})
